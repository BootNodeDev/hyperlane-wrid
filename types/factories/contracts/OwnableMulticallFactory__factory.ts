/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  OwnableMulticallFactory,
  OwnableMulticallFactoryInterface,
} from "../../contracts/OwnableMulticallFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "multicall",
        type: "address",
      },
    ],
    name: "MulticallCreated",
    type: "event",
  },
  {
    inputs: [],
    name: "bytecodeHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "to",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct CallLib.Call[]",
        name: "_calls",
        type: "tuple[]",
      },
    ],
    name: "deployAndCall",
    outputs: [
      {
        internalType: "address payable",
        name: "_multicall",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "getMulticallAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b503060405161001e906100d4565b6001600160a01b039091168152602001604051809103906000f08015801561004a573d6000803e3d6000fd5b506001600160a01b038116608052604080517f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000602082015260609290921b6001600160601b03191660348301526e5af43d82803e903d91602b57fd5bf360881b60488301528051808303603701815260579092019052600090805160209091012060a052506100e1565b610b4680610b8683390190565b60805160a051610a736101136000396000818160c3015261042c01526000818161010501526101d20152610a736000f3fe6080604052600436106100435760003560e01c80630cbcb85a1461004f5780633dfaed0814610079578063420c6a2c146100b15780635c60da1b146100f357600080fd5b3661004a57005b600080fd5b61006261005d3660046106b0565b610127565b60405161007092919061074b565b60405180910390f35b34801561008557600080fd5b506100996100943660046107db565b6103c6565b6040516001600160a01b039091168152602001610070565b3480156100bd57600080fd5b506100e57f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610070565b3480156100ff57600080fd5b506100997f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008061017c336040516bffffffffffffffffffffffff1930606090811b8216602084015283901b166034820152600090604801604051602081830303815290604052805190602001209050919050565b905061018781610424565b93506001600160a01b0384163b6102df57604080517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000060208201526bffffffffffffffffffffffff197f000000000000000000000000000000000000000000000000000000000000000060601b1660348201527f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000604882015281516037818303018152605790910190915261023e60008383610450565b945061024a8534610560565b60405163189acdbd60e31b81523060048201526001600160a01b0386169063c4d66de890602401600060405180830381600087803b15801561028b57600080fd5b505af115801561029f573d6000803e3d6000fd5b5050604051600195506001600160a01b03881692503391507ff86e0f52e04dca737dcf9d26cd6f21569898426690cbd7a10273e92e8f13d3dd90600090a3505b841561035d576040516365604f8360e01b81526001600160a01b038516906365604f8390610313908990899060040161082d565b6000604051808303816000875af1158015610332573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035a919081019061093b565b92505b81156103bd5760405163f2fde38b60e01b81523360048201526001600160a01b0385169063f2fde38b90602401600060405180830381600087803b1580156103a457600080fd5b505af11580156103b8573d6000803e3d6000fd5b505050505b50509250929050565b600061041e610419836040516bffffffffffffffffffffffff1930606090811b8216602084015283901b166034820152600090604801604051602081830303815290604052805190602001209050919050565b610424565b92915050565b600061041e827f000000000000000000000000000000000000000000000000000000000000000061067e565b6000834710156104a75760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b81516000036104f85760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161049e565b8282516020840186f590506001600160a01b0381166105595760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640161049e565b9392505050565b804710156105b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161049e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146105fd576040519150601f19603f3d011682016040523d82523d6000602084013e610602565b606091505b50509050806106795760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161049e565b505050565b60006105598383306000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b600080602083850312156106c357600080fd5b823567ffffffffffffffff8111156106da57600080fd5b8301601f810185136106eb57600080fd5b803567ffffffffffffffff81111561070257600080fd5b8560208260051b840101111561071757600080fd5b6020919091019590945092505050565b60005b8381101561074257818101518382015260200161072a565b50506000910152565b6000604082016001600160a01b03851683526040602084015280845180835260608501915060608160051b86010192506020860160005b828110156107ce57605f19878603018452815180518087526107ab816020890160208501610727565b601f01601f19169590950160209081019550938401939190910190600101610782565b5092979650505050505050565b6000602082840312156107ed57600080fd5b81356001600160a01b038116811461055957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020808252810182905260006040600584901b830181019083018583605e1936839003015b878210156107ce57868503603f19018452823581811261087157600080fd5b89018035865260208082013590870152604081013536829003601e1901811261089957600080fd5b0160208101903567ffffffffffffffff8111156108b557600080fd5b8036038213156108c457600080fd5b606060408801526108d9606088018284610804565b96505050602083019250602084019350600182019150610852565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610933576109336108f4565b604052919050565b60006020828403121561094d57600080fd5b815167ffffffffffffffff81111561096457600080fd5b8201601f8101841361097557600080fd5b805167ffffffffffffffff81111561098f5761098f6108f4565b8060051b61099f6020820161090a565b918252602081840181019290810190878411156109bb57600080fd5b6020850192505b83831015610a5b57825167ffffffffffffffff8111156109e157600080fd5b8501603f810189136109f257600080fd5b602081015167ffffffffffffffff811115610a0f57610a0f6108f4565b610a22601f8201601f191660200161090a565b8181526040838301018b1015610a3757600080fd5b610a48826020830160408601610727565b84525050602092830192909101906109c2565b97965050505050505056fea164736f6c634300081b000a608060405234801561001057600080fd5b50604051610b46380380610b4683398101604081905261002f9161016b565b6100383361004f565b6100418161004f565b61004961009f565b5061019b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a81b900460ff161561010d5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b600054600160a01b900460ff90811614610169576000805460ff60a01b191660ff60a01b17905560405160ff81527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60006020828403121561017d57600080fd5b81516001600160a01b038116811461019457600080fd5b9392505050565b61099c806101aa6000396000f3fe60806040526004361061005e5760003560e01c80638da5cb5b116100435780638da5cb5b146100b7578063c4d66de8146100df578063f2fde38b146100ff57600080fd5b806365604f831461006a578063715018a6146100a057600080fd5b3661006557005b600080fd5b34801561007657600080fd5b5061008a610085366004610688565b61011f565b604051610097919061074f565b60405180910390f35b3480156100ac57600080fd5b506100b56101e9565b005b3480156100c357600080fd5b506000546040516001600160a01b039091168152602001610097565b3480156100eb57600080fd5b506100b56100fa3660046107b4565b6101fd565b34801561010b57600080fd5b506100b561011a3660046107b4565b61035a565b60606101296103ea565b6000828067ffffffffffffffff811115610145576101456107e4565b60405190808252806020026020018201604052801561017857816020015b60608152602001906001900390816101635790505b5092505b808210156101e1576101b9858584818110610199576101996107fa565b90506020028101906101ab9190610810565b6101b49061088a565b610444565b8383815181106101cb576101cb6107fa565b602002602001018190525081600101915061017c565b505092915050565b6101f16103ea565b6101fb6000610462565b565b600054600160a81b900460ff161580801561022557506000546001600160a01b90910460ff16105b806102465750303b1580156102465750600054600160a01b900460ff166001145b6102bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790558015610305576000805460ff60a81b1916600160a81b1790555b61030e82610462565b8015610356576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6103626103ea565b6001600160a01b0381166103de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102b4565b6103e781610462565b50565b6000546001600160a01b031633146101fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b4565b805160609061045c90836040015184602001516104ca565b92915050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606104f0848484604051806060016040528060298152602001610967602991396104f8565b949350505050565b6060824710156105705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102b4565b600080866001600160a01b0316858760405161058c9190610941565b60006040518083038185875af1925050503d80600081146105c9576040519150601f19603f3d011682016040523d82523d6000602084013e6105ce565b606091505b50915091506105df878383876105ea565b979650505050505050565b60608315610659578251600003610652576001600160a01b0385163b6106525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b4565b50816104f0565b6104f0838381511561066e5781518083602001fd5b8060405162461bcd60e51b81526004016102b49190610953565b6000806020838503121561069b57600080fd5b823567ffffffffffffffff8111156106b257600080fd5b8301601f810185136106c357600080fd5b803567ffffffffffffffff8111156106da57600080fd5b8560208260051b84010111156106ef57600080fd5b6020919091019590945092505050565b60005b8381101561071a578181015183820152602001610702565b50506000910152565b6000815180845261073b8160208601602086016106ff565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b828110156107a857603f19878603018452610793858351610723565b94506020938401939190910190600101610777565b50929695505050505050565b6000602082840312156107c657600080fd5b81356001600160a01b03811681146107dd57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261082657600080fd5b9190910192915050565b6040516060810167ffffffffffffffff81118282101715610853576108536107e4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610882576108826107e4565b604052919050565b60006060823603121561089c57600080fd5b6108a4610830565b8235815260208301356020820152604083013567ffffffffffffffff8111156108cc57600080fd5b830136601f8201126108dd57600080fd5b803567ffffffffffffffff8111156108f7576108f76107e4565b61090a601f8201601f1916602001610859565b81815236602083850101111561091f57600080fd5b8160208401602083013760009181016020019190915260408301525092915050565b600082516108268184602087016106ff565b6020815260006107dd602083018461072356fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a164736f6c634300081b000a";

type OwnableMulticallFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnableMulticallFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnableMulticallFactory__factory extends ContractFactory {
  constructor(...args: OwnableMulticallFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OwnableMulticallFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): OwnableMulticallFactory__factory {
    return super.connect(runner) as OwnableMulticallFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnableMulticallFactoryInterface {
    return new Interface(_abi) as OwnableMulticallFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OwnableMulticallFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as OwnableMulticallFactory;
  }
}
