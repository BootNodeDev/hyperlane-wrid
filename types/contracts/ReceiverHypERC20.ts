/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GasRouter {
  export type GasRouterConfigStruct = {
    domain: BigNumberish;
    gas: BigNumberish;
  };

  export type GasRouterConfigStructOutput = [domain: bigint, gas: bigint] & {
    domain: bigint;
    gas: bigint;
  };
}

export interface ReceiverHypERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "destinationGas"
      | "domains"
      | "enrollRemoteRouter"
      | "enrollRemoteRouters"
      | "handle"
      | "hook"
      | "increaseAllowance"
      | "initialize(uint256,string,string,address,address,address,address)"
      | "initialize(uint256,string,string,address,address,address)"
      | "interchainSecurityModule"
      | "localDomain"
      | "mailbox"
      | "name"
      | "owner"
      | "quoteGasPayment"
      | "renounceOwnership"
      | "routers"
      | "setDestinationGas(uint32,uint256)"
      | "setDestinationGas((uint32,uint256)[])"
      | "setHook"
      | "setInterchainSecurityModule"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferRemote(uint32,bytes32,uint256,bytes,address)"
      | "transferRemote(uint32,bytes32,uint256)"
      | "unenrollRemoteRouter"
      | "unenrollRemoteRouters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Initialized"
      | "OwnershipTransferred"
      | "ReceivedTransferRemote"
      | "SentTransferRemote"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "destinationGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "domains", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enrollRemoteRouter",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enrollRemoteRouters",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,string,string,address,address,address,address)",
    values: [
      BigNumberish,
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,string,string,address,address,address)",
    values: [
      BigNumberish,
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interchainSecurityModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mailbox", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteGasPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationGas(uint32,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationGas((uint32,uint256)[])",
    values: [GasRouter.GasRouterConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterchainSecurityModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRemote(uint32,bytes32,uint256,bytes,address)",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRemote(uint32,bytes32,uint256)",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unenrollRemoteRouter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unenrollRemoteRouters",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinationGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enrollRemoteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enrollRemoteRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,string,string,address,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,string,string,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interchainSecurityModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mailbox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteGasPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationGas(uint32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationGas((uint32,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterchainSecurityModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRemote(uint32,bytes32,uint256,bytes,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRemote(uint32,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unenrollRemoteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unenrollRemoteRouters",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedTransferRemoteEvent {
  export type InputTuple = [
    origin: BigNumberish,
    recipient: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [origin: bigint, recipient: string, amount: bigint];
  export interface OutputObject {
    origin: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentTransferRemoteEvent {
  export type InputTuple = [
    destination: BigNumberish,
    recipient: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    destination: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    destination: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReceiverHypERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): ReceiverHypERC20;
  waitForDeployment(): Promise<this>;

  interface: ReceiverHypERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  destinationGas: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  domains: TypedContractMethod<[], [bigint[]], "view">;

  enrollRemoteRouter: TypedContractMethod<
    [_domain: BigNumberish, _router: BytesLike],
    [void],
    "nonpayable"
  >;

  enrollRemoteRouters: TypedContractMethod<
    [_domains: BigNumberish[], _addresses: BytesLike[]],
    [void],
    "nonpayable"
  >;

  handle: TypedContractMethod<
    [_origin: BigNumberish, _sender: BytesLike, _message: BytesLike],
    [void],
    "payable"
  >;

  hook: TypedContractMethod<[], [string], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "initialize(uint256,string,string,address,address,address,address)": TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _name: string,
      _symbol: string,
      _hook: AddressLike,
      _interchainSecurityModule: AddressLike,
      _owner: AddressLike,
      _receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "initialize(uint256,string,string,address,address,address)": TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _name: string,
      _symbol: string,
      _hook: AddressLike,
      _interchainSecurityModule: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  interchainSecurityModule: TypedContractMethod<[], [string], "view">;

  localDomain: TypedContractMethod<[], [bigint], "view">;

  mailbox: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  quoteGasPayment: TypedContractMethod<
    [_destinationDomain: BigNumberish],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  routers: TypedContractMethod<[_domain: BigNumberish], [string], "view">;

  "setDestinationGas(uint32,uint256)": TypedContractMethod<
    [domain: BigNumberish, gas: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setDestinationGas((uint32,uint256)[])": TypedContractMethod<
    [gasConfigs: GasRouter.GasRouterConfigStruct[]],
    [void],
    "nonpayable"
  >;

  setHook: TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;

  setInterchainSecurityModule: TypedContractMethod<
    [_module: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "transferRemote(uint32,bytes32,uint256,bytes,address)": TypedContractMethod<
    [
      _destination: BigNumberish,
      _recipient: BytesLike,
      _amountOrId: BigNumberish,
      _hookMetadata: BytesLike,
      _hook: AddressLike
    ],
    [string],
    "payable"
  >;

  "transferRemote(uint32,bytes32,uint256)": TypedContractMethod<
    [
      _destination: BigNumberish,
      _recipient: BytesLike,
      _amountOrId: BigNumberish
    ],
    [string],
    "payable"
  >;

  unenrollRemoteRouter: TypedContractMethod<
    [_domain: BigNumberish],
    [void],
    "nonpayable"
  >;

  unenrollRemoteRouters: TypedContractMethod<
    [_domains: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "destinationGas"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "domains"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "enrollRemoteRouter"
  ): TypedContractMethod<
    [_domain: BigNumberish, _router: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enrollRemoteRouters"
  ): TypedContractMethod<
    [_domains: BigNumberish[], _addresses: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handle"
  ): TypedContractMethod<
    [_origin: BigNumberish, _sender: BytesLike, _message: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "hook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize(uint256,string,string,address,address,address,address)"
  ): TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _name: string,
      _symbol: string,
      _hook: AddressLike,
      _interchainSecurityModule: AddressLike,
      _owner: AddressLike,
      _receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize(uint256,string,string,address,address,address)"
  ): TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _name: string,
      _symbol: string,
      _hook: AddressLike,
      _interchainSecurityModule: AddressLike,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interchainSecurityModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "localDomain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mailbox"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteGasPayment"
  ): TypedContractMethod<[_destinationDomain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "routers"
  ): TypedContractMethod<[_domain: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setDestinationGas(uint32,uint256)"
  ): TypedContractMethod<
    [domain: BigNumberish, gas: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDestinationGas((uint32,uint256)[])"
  ): TypedContractMethod<
    [gasConfigs: GasRouter.GasRouterConfigStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterchainSecurityModule"
  ): TypedContractMethod<[_module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferRemote(uint32,bytes32,uint256,bytes,address)"
  ): TypedContractMethod<
    [
      _destination: BigNumberish,
      _recipient: BytesLike,
      _amountOrId: BigNumberish,
      _hookMetadata: BytesLike,
      _hook: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferRemote(uint32,bytes32,uint256)"
  ): TypedContractMethod<
    [
      _destination: BigNumberish,
      _recipient: BytesLike,
      _amountOrId: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unenrollRemoteRouter"
  ): TypedContractMethod<[_domain: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unenrollRemoteRouters"
  ): TypedContractMethod<[_domains: BigNumberish[]], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedTransferRemote"
  ): TypedContractEvent<
    ReceivedTransferRemoteEvent.InputTuple,
    ReceivedTransferRemoteEvent.OutputTuple,
    ReceivedTransferRemoteEvent.OutputObject
  >;
  getEvent(
    key: "SentTransferRemote"
  ): TypedContractEvent<
    SentTransferRemoteEvent.InputTuple,
    SentTransferRemoteEvent.OutputTuple,
    SentTransferRemoteEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReceivedTransferRemote(uint32,bytes32,uint256)": TypedContractEvent<
      ReceivedTransferRemoteEvent.InputTuple,
      ReceivedTransferRemoteEvent.OutputTuple,
      ReceivedTransferRemoteEvent.OutputObject
    >;
    ReceivedTransferRemote: TypedContractEvent<
      ReceivedTransferRemoteEvent.InputTuple,
      ReceivedTransferRemoteEvent.OutputTuple,
      ReceivedTransferRemoteEvent.OutputObject
    >;

    "SentTransferRemote(uint32,bytes32,uint256)": TypedContractEvent<
      SentTransferRemoteEvent.InputTuple,
      SentTransferRemoteEvent.OutputTuple,
      SentTransferRemoteEvent.OutputObject
    >;
    SentTransferRemote: TypedContractEvent<
      SentTransferRemoteEvent.InputTuple,
      SentTransferRemoteEvent.OutputTuple,
      SentTransferRemoteEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
