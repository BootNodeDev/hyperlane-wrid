/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "GasRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasRouter__factory>;
    getContractFactory(
      name: "MailboxClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MailboxClient__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "StandardHookMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardHookMetadata__factory>;
    getContractFactory(
      name: "IPostDispatchHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPostDispatchHook__factory>;
    getContractFactory(
      name: "IInterchainSecurityModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterchainSecurityModule__factory>;
    getContractFactory(
      name: "ISpecifiesInterchainSecurityModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule__factory>;
    getContractFactory(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMailbox__factory>;
    getContractFactory(
      name: "IMessageRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageRecipient__factory>;
    getContractFactory(
      name: "InterchainAccountRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterchainAccountRouter__factory>;
    getContractFactory(
      name: "OwnableMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableMulticall__factory>;
    getContractFactory(
      name: "HypERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HypERC20__factory>;
    getContractFactory(
      name: "TokenRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenRouter__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ICreateX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreateX__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "OwnableMulticallFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableMulticallFactory__factory>;
    getContractFactory(
      name: "ReceiverHypERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReceiverHypERC20__factory>;
    getContractFactory(
      name: "TransferrableOwnableMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferrableOwnableMulticall__factory>;

    getContractAt(
      name: "GasRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasRouter>;
    getContractAt(
      name: "MailboxClient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MailboxClient>;
    getContractAt(
      name: "Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "StandardHookMetadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardHookMetadata>;
    getContractAt(
      name: "IPostDispatchHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPostDispatchHook>;
    getContractAt(
      name: "IInterchainSecurityModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterchainSecurityModule>;
    getContractAt(
      name: "ISpecifiesInterchainSecurityModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule>;
    getContractAt(
      name: "IMailbox",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMailbox>;
    getContractAt(
      name: "IMessageRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageRecipient>;
    getContractAt(
      name: "InterchainAccountRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InterchainAccountRouter>;
    getContractAt(
      name: "OwnableMulticall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableMulticall>;
    getContractAt(
      name: "HypERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HypERC20>;
    getContractAt(
      name: "TokenRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenRouter>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ITransparentUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ICreateX",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreateX>;
    getContractAt(
      name: "Lock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "OwnableMulticallFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableMulticallFactory>;
    getContractAt(
      name: "ReceiverHypERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReceiverHypERC20>;
    getContractAt(
      name: "TransferrableOwnableMulticall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferrableOwnableMulticall>;

    deployContract(
      name: "GasRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasRouter>;
    deployContract(
      name: "MailboxClient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MailboxClient>;
    deployContract(
      name: "Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Router>;
    deployContract(
      name: "StandardHookMetadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardHookMetadata>;
    deployContract(
      name: "IPostDispatchHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPostDispatchHook>;
    deployContract(
      name: "IInterchainSecurityModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterchainSecurityModule>;
    deployContract(
      name: "ISpecifiesInterchainSecurityModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule>;
    deployContract(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMailbox>;
    deployContract(
      name: "IMessageRecipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageRecipient>;
    deployContract(
      name: "InterchainAccountRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterchainAccountRouter>;
    deployContract(
      name: "OwnableMulticall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableMulticall>;
    deployContract(
      name: "HypERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HypERC20>;
    deployContract(
      name: "TokenRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenRouter>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ICreateX",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICreateX>;
    deployContract(
      name: "Lock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "OwnableMulticallFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableMulticallFactory>;
    deployContract(
      name: "ReceiverHypERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReceiverHypERC20>;
    deployContract(
      name: "TransferrableOwnableMulticall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferrableOwnableMulticall>;

    deployContract(
      name: "GasRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasRouter>;
    deployContract(
      name: "MailboxClient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MailboxClient>;
    deployContract(
      name: "Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Router>;
    deployContract(
      name: "StandardHookMetadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardHookMetadata>;
    deployContract(
      name: "IPostDispatchHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPostDispatchHook>;
    deployContract(
      name: "IInterchainSecurityModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterchainSecurityModule>;
    deployContract(
      name: "ISpecifiesInterchainSecurityModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule>;
    deployContract(
      name: "IMailbox",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMailbox>;
    deployContract(
      name: "IMessageRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMessageRecipient>;
    deployContract(
      name: "InterchainAccountRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InterchainAccountRouter>;
    deployContract(
      name: "OwnableMulticall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableMulticall>;
    deployContract(
      name: "HypERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HypERC20>;
    deployContract(
      name: "TokenRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenRouter>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1967",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Upgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Upgrade>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ITransparentUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ICreateX",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICreateX>;
    deployContract(
      name: "Lock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;
    deployContract(
      name: "OwnableMulticallFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableMulticallFactory>;
    deployContract(
      name: "ReceiverHypERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReceiverHypERC20>;
    deployContract(
      name: "TransferrableOwnableMulticall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferrableOwnableMulticall>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
